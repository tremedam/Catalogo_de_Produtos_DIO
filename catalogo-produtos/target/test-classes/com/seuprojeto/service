package com.seuprojeto.service;

import com.seuprojeto.model.Produto;
import com.seuprojeto.repository.ProdutoRepository;
import com.seuprojeto.strategy.DescontoStrategy;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class ProductServiceTest {

    @InjectMocks
    private ProductService productService;

    @Mock
    private ProdutoRepository produtoRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testAplicarDescontoClienteVip() {
        Produto produto = new Produto();
        produto.setPrecoOriginal(new BigDecimal("100.00"));

        DescontoStrategy descontoVip = new DescontoClienteVip();
        BigDecimal precoComDesconto = descontoVip.calcular(produto.getPrecoOriginal());

        assertEquals(new BigDecimal("90.00"), precoComDesconto);
    }

    @Test
    public void testCadastrarProduto() {
        Produto produto = new Produto();
        produto.setNome("Produto Teste");
        produto.setPrecoOriginal(new BigDecimal("50.00"));

        when(produtoRepository.save(produto)).thenReturn(produto);

        Produto produtoSalvo = productService.cadastrarProduto(produto);

        assertEquals("Produto Teste", produtoSalvo.getNome());
        assertEquals(new BigDecimal("50.00"), produtoSalvo.getPrecoOriginal());
    }
}